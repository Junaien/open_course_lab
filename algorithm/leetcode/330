330. Patching Array

Given a sorted positive integer array nums and an integer n, add/patch elements to the array such that any number in range [1, n] inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required.

Example 1:

Input: nums = [1,3], n = 6
Output: 1 
Explanation:
Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.
Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].
Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].
So we only need 1 patch.

-----

Algorithm
  S1. Greedy
    Input:
      arr [],
      n   int

    Initialization:
      sort arr
      head: what is current smallest number that is not covered

    process:
      while head is not greater than n (we have not cover to number n):
        if next element is <= head:
          go ahead merge this element to current sum set
          pop out this element
        else:
          patch it by adding head

    termination: 
      The times we patch is minimum
  
  Proof (by exchange argument and contradiction)
    1. assume the elements in OPT solution, x1*, x2*, x3*..... 
    2. assume the elements in S1, x1, x2, x3...
    3. since S1 not OPT, let xi be the first one that makes x1...xi not in any OPT
      3.1 pick OPT* in OPT contains x1*...x[i-1]* = x1..x[i-1]. Swap over xi* to be the one tries to cover head
    4. so what head means is that considering all patch element and all element checked in arr, what is largest cover
      4.1 after picking x1,x2,x3...x[i-1], both OPT* and S1 covered [1, head)
      4.2 the rest elements in arr aren't gonna help, since element > head. 
      4.3 to cover head, both S1 and OPT should pick patch [1, head],
    5. whatever OPT picked at xi*,  we exchange that for xi.
    6. that contradicts no OPT contains x1 .... xi


  
